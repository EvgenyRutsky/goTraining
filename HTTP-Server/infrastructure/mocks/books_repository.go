// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import domain "httpserver/domain"

import mock "github.com/stretchr/testify/mock"

// BooksRepository is an autogenerated mock type for the BooksRepository type
type BooksRepository struct {
	mock.Mock
}

// DeleteBook provides a mock function with given fields: id
func (_m *BooksRepository) DeleteBook(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookByID provides a mock function with given fields: id
func (_m *BooksRepository) GetBookByID(id int) (*domain.Book, error) {
	ret := _m.Called(id)

	var r0 *domain.Book
	if rf, ok := ret.Get(0).(func(int) *domain.Book); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooks provides a mock function with given fields:
func (_m *BooksRepository) GetBooks() ([]*domain.Book, error) {
	ret := _m.Called()

	var r0 []*domain.Book
	if rf, ok := ret.Get(0).(func() []*domain.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertBook provides a mock function with given fields: book
func (_m *BooksRepository) InsertBook(book *domain.Book) (interface{}, error) {
	ret := _m.Called(book)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(*domain.Book) interface{}); ok {
		r0 = rf(book)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.Book) error); ok {
		r1 = rf(book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: book
func (_m *BooksRepository) UpdateBook(book *domain.Book) (int, error) {
	ret := _m.Called(book)

	var r0 int
	if rf, ok := ret.Get(0).(func(*domain.Book) int); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.Book) error); ok {
		r1 = rf(book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
